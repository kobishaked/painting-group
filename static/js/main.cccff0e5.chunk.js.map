{"version":3,"sources":["contexts/DrawingContext.js","components/Pixel.js","components/ColorPicker.js","App.js","serviceWorker.js","Connection.js","index.js"],"names":["DrawingContext","createContext","DrawingContextProvider","props","useState","isDrawing","setIsDrawing","state","Drawing","Provider","value","children","Update_Color","gql","Pixel","id","color","newColor","pixelColor","changeColor","useMutation","updatePixelColor","useContext","useEffect","className","onMouseDown","variables","onMouseMove","onMouseUp","onClick","style","backgroundColor","colorChoices","Color","handleClick","ColorPicker","map","key","Array","fill","Get_Pixels","App","useSubscription","loading","data","error","pixels","pixel","Boolean","window","location","hostname","match","ApolloClient","cache","InMemoryCache","link","WebSocketLink","uri","options","reconnect","ReactDOM","render","client","connection","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAEMA,EAAiBC,wBAAc,IAExBC,EAAyB,SAACC,GAAW,IAAD,EAEfC,mBAAS,CACnCC,WAAW,EACXC,aAAc,SAAUC,GACtBC,EAAQH,UAAYE,KALmB,mBAEtCC,EAFsC,UAS7C,OACI,kBAACR,EAAeS,SAAhB,CAAyBC,MAAOF,GAC3BL,EAAMQ,WAKJX,I,uPCff,IAAMY,EAAeC,IAAH,KA2DHC,EAhDD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EACPb,mBAASY,GADF,mBAClCE,EADkC,KACtBC,EADsB,OAEdC,YAAYR,GAAhCS,EAFkC,sBAGLC,qBAAWtB,GAAvCK,EAHiC,EAGjCA,UAAWC,EAHsB,EAGtBA,aAQnB,OALAiB,qBAAU,WACRJ,EAAYH,KACX,CAACA,IAIF,0BACEQ,UAAU,QACVC,YAAa,WACXN,EAAYF,GACZI,EAAiB,CAAEK,UAAW,CAAEX,GAAIA,EAAIC,MAAOC,KAC/CX,GAAa,IAEfqB,YAAa,WACPtB,IACFc,EAAYF,GACZI,EAAiB,CAAEK,UAAW,CAAEX,GAAIA,EAAIC,MAAOC,OAGnDW,UAAW,WAGTtB,GAAa,IAKfuB,QAAS,WAELvB,GADED,GAMJc,EAAYF,GACZI,EAAiB,CAAEK,UAAW,CAAEX,GAAIA,EAAIC,MAAOC,MAEjDa,MAAO,CAAEC,gBAAiBb,MCzD1Bc,EAAe,CACnB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAGIC,EAAQ,SAAA9B,GAAK,OACjB,0BACEqB,UAAU,gBACVM,MAAO,CAAEC,gBAAiB5B,EAAMa,OAChCa,QAAS,WACP1B,EAAM+B,YAAY/B,EAAMa,WAafmB,EARK,SAAAhC,GAAK,OACvB,yBAAKqB,UAAU,WACZQ,EAAaI,KAAI,SAACpB,EAAOD,GAAR,OAChB,kBAAC,EAAD,CAAOmB,YAAa,kBAAM/B,EAAMgB,YAAYH,IAAQA,MAAOA,EAAOqB,IAAKtB,S,6JCrB9D,IAAIuB,MAAM,KAAKC,KAAK,SAAnC,IAEMC,EAAa3B,IAAH,KAuCD4B,MA9Bf,WAAgB,IAAD,EACgBrC,mBAAS,SADzB,mBACNY,EADM,KACCG,EADD,OAEoBuB,YAAgBF,GAAzCG,EAFK,EAELA,QAAgBC,GAFX,EAEIC,MAFJ,EAEWD,MAExB,OAAID,EACK,2CAIP,kBAAC,EAAD,KACE,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,QAAf,QACA,2CACA,kBAAC,EAAD,CAAaL,YAAaA,IAC1B,4CACA,yBAAKK,UAAU,aACZoB,EAAKE,OAAOV,KAAI,SAACW,GAAD,OACf,kBAAC,EAAD,CACE/B,MAAO+B,EAAM/B,MACbD,GAAIgC,EAAMhC,GACVsB,IAAKU,EAAMhC,GACXE,SAAUD,WC3BJgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BCdS,MAAIC,IAAa,CAC5BC,MAAO,IAAIC,IACXC,KAAM,IAAIC,IAAc,CACpBC,IAAK,gDACLC,QAAQ,CACJC,WAAW,OCDvBC,IAASC,OACL,kBAAC,IAAD,CAAgBC,OAAQC,GACpB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SFuHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.cccff0e5.chunk.js","sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react'\r\n\r\nconst DrawingContext = createContext({});\r\n\r\nexport const DrawingContextProvider = (props) => {\r\n\r\n    const [Drawing, setDrawing] = useState({\r\n        isDrawing: false,\r\n        setIsDrawing: function (state) {\r\n          Drawing.isDrawing = state\r\n        }\r\n      })\r\n\r\n    return (\r\n        <DrawingContext.Provider value={Drawing}>\r\n            {props.children}\r\n        </DrawingContext.Provider>\r\n    )\r\n}\r\n\r\nexport default DrawingContext","import React, { useState, useEffect, useContext } from \"react\";\r\nimport gql from 'graphql-tag';\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport DrawingContext from '../contexts/DrawingContext'\r\n\r\nconst Update_Color = gql`\r\nmutation updatePixel($id: Int!, $color: String!) {\r\n  update_pixels(where: {id: {_eq: $id}}, _set: {color: $color}) {\r\n    returning {  \r\n      id\r\n      color\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nconst Pixel = ({ id, color, newColor }) => {\r\n  const [pixelColor, changeColor] = useState(color);\r\n  const [updatePixelColor] = useMutation(Update_Color);\r\n  const { isDrawing, setIsDrawing } = useContext(DrawingContext);\r\n\r\n\r\n  useEffect(() => {\r\n    changeColor(color);\r\n  }, [color])\r\n\r\n\r\n  return (\r\n    <span\r\n      className=\"pixel\"\r\n      onMouseDown={() => {\r\n        changeColor(newColor);\r\n        updatePixelColor({ variables: { id: id, color: newColor } });\r\n        setIsDrawing(true)\r\n      }}\r\n      onMouseMove={() => {\r\n        if (isDrawing) {\r\n          changeColor(newColor);\r\n          updatePixelColor({ variables: { id: id, color: newColor } });\r\n        }\r\n      }}\r\n      onMouseUp={() => {\r\n        // changeColor(newColor);\r\n        // updatePixelColor({ variables: { id: id, color: newColor } });\r\n        setIsDrawing(false)\r\n      }}\r\n\r\n\r\n\r\n      onClick={() => {\r\n        if (isDrawing) {\r\n          setIsDrawing(false)\r\n        }\r\n        else {\r\n          setIsDrawing(true)\r\n        }\r\n        changeColor(newColor);\r\n        updatePixelColor({ variables: { id: id, color: newColor } });\r\n      }}\r\n      style={{ backgroundColor: pixelColor }}\r\n    ></span>\r\n  );\r\n};\r\n\r\nexport default Pixel;\r\n","import React from \"react\";\r\n\r\nconst colorChoices = [\r\n  \"#f44336\",\r\n  \"#f06292\",\r\n  \"#9c27b0\",\r\n  \"#2196f3\",\r\n  \"#009688\",\r\n  \"#8bc34a\",\r\n  \"#ffeb3b\",\r\n  \"#ff9800\",\r\n  \"#ffffff\",\r\n  \"#212121\"\r\n];\r\n\r\nconst Color = props => (\r\n  <span\r\n    className=\"palette-color\"\r\n    style={{ backgroundColor: props.color }}\r\n    onClick={() => {\r\n      props.handleClick(props.color);\r\n    }}\r\n  ></span>\r\n);\r\n\r\nconst ColorPicker = props => (\r\n  <div className=\"palette\">\r\n    {colorChoices.map((color, id) => (\r\n      <Color handleClick={() => props.changeColor(color)} color={color} key={id} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default ColorPicker;\r\n","import React, { useState, useContext } from \"react\";\r\nimport Pixel from \"./components/Pixel\";\r\nimport ColorPicker from \"./components/ColorPicker\";\r\nimport { useSubscription } from '@apollo/react-hooks';\r\nimport gql from 'graphql-tag';\r\nimport { DrawingContextProvider } from './contexts/DrawingContext'\r\n\r\nconst pixels = new Array(400).fill(\"white\");\r\n\r\nconst Get_Pixels = gql`\r\nsubscription GetPixels {\r\n  pixels(order_by: {id: asc}) {\r\n    color\r\n    id\r\n  }\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  const [color, changeColor] = useState(\"white\");\r\n  const { loading, error, data } = useSubscription(Get_Pixels);\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>\r\n  }\r\n\r\n  return (\r\n    <DrawingContextProvider>\r\n      <div className=\"content\">\r\n        <div className=\"logo\">Draw</div>\r\n        <p>Pick a Color</p>\r\n        <ColorPicker changeColor={changeColor} />\r\n        <p>Click a Pixel</p>\r\n        <div className=\"container\">\r\n          {data.pixels.map((pixel) => (\r\n            <Pixel\r\n              color={pixel.color}\r\n              id={pixel.id}\r\n              key={pixel.id}\r\n              newColor={color}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </DrawingContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { WebSocketLink } from 'apollo-link-ws';\r\nimport { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\n\r\nexport default new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: new WebSocketLink({\r\n        uri: \"wss://painting-group.herokuapp.com/v1/graphql\",\r\n        options:{\r\n            reconnect: true\r\n        }\r\n    })\r\n});","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport connection from \"./Connection\";\r\n\r\nReactDOM.render(\r\n    <ApolloProvider client={connection}>\r\n        <App />\r\n    </ApolloProvider>\r\n    , document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}